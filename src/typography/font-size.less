// ============
// Font-size
// ============
// This mixin will enable using the CSS3 value `rem`, which lets you define
// property-sizes based on the root-element's font-size.
//
// Note: Depending on the font-size of the root-element `rem` calculates a
// property of a current element. The fallback solution excepts a
// `default-font-size`-argument which is 16px by default.
//
// @link caniuse http://caniuse.com/rem
// @link spec http://www.w3.org/TR/css3-values/#relative0
//
// Examples:
// .rem(margin, 1rem 1.5rem);
// .font-size(16px);
// .font-size(1em, 16px, 20px);
// .font-size-em(14);
// .font-size-em(14, 18);
// .font-size-em(14px);
// .font-size-em(14px, 18px);
// -----------------------------------------------

// Font size
// -----------------
// value: px | em | %
.font-size(@size, @default-font-size: @default-font-size, @context-px-size: @default-font-size) {
    .inception(@size) when (ispixel(@size)) {
        @px-size: unit(@size);
        @default-size: unit(@default-font-size);
        @rem-size: (@px-size / @default-size);
        font-size: ~"@{px-size}px";
        font-size: ~"@{rem-size}rem";
    }
    .inception(@size) when (isem(@size)) {
        @em-size: unit(@size);
        @context-size: unit(@context-px-size);
        @default-size: unit(@default-font-size);
        @rem-size: (@em-size * @context-size / @default-size);
        font-size: ~"@{em-size}em";
        font-size: ~"@{rem-size}rem";
    }
    .inception(@size) when (ispercentage(@size)) {
        font-size: @size;
    }
    .inception(@size);
}

// Font-size-em
// ----------------
// According to the context switching unit into em
.font-size-em(@target-px-size, @context-px-size: @default-font-size) {
    font-size: unit(unit(@target-px-size) / unit(@context-px-size), em);
}